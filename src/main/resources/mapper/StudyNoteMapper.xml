<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bit.naver.mapper.StudyNoteMapper">

    <!-- 내 공부자료 List를 조회하는 SQL 쿼리 -->
    <select id="getAllStudyNote" resultType="bit.naver.entity.StudyReferencesEntity">
        SELECT study.reference_idx AS referenceIdx,
        study.user_idx AS userIdx,
        name,
        title,
        isPrivate,
        content,
        category,
        file_attachments,
        #{limits} AS limits,
        likes_count AS likesCount,
        report_count AS reportCount,
        comments_count AS commentsCount,
        views_count AS viewsCount,
        DATE_FORMAT(study.created_at, '%Y-%m-%d %H:%i') AS createdAt,
        study.updated_at AS updatedAt,
        IFNULL(lr.reference_idx, 0) AS isLike,
        COUNT(*) OVER () AS TOTALCOUNT
        FROM StudyReferences study
        LEFT JOIN Users user ON user.user_idx = study.user_idx
        LEFT JOIN LikeReferences lr ON study.reference_idx = lr.reference_idx AND lr.user_idx = #{userIdx}
        <where>
            study.user_idx = #{userIdx}
            <if test="searchOption != null and searchOption == 'all-post' and searchKeyword != null and searchKeyword != ''">
                AND (title LIKE CONCAT('%', #{searchKeyword}, '%') OR name LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="searchOption != null and searchOption == 'title-post' and searchKeyword != null and searchKeyword != ''">
                AND title LIKE CONCAT('%', #{searchKeyword}, '%')
            </if>
            <if test="searchOption != null and searchKeyword != null and searchKeyword != ''">
                AND (title LIKE CONCAT('%', #{searchKeyword}, '%') OR content LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
            <if test="searchOption != null and searchOption == 'writer-post' and searchKeyword != null and searchKeyword != ''">
                AND name LIKE CONCAT('%', #{searchKeyword}, '%')
            </if>
        </where>
        ORDER BY study.created_at DESC
        LIMIT 0, ${limits}

    </select>

    <!-- 공부자료 한개의 글 조회하는 SQl 쿼리 -->
    <select id="getStudyNoteById" resultType="bit.naver.entity.StudyReferencesEntity">
        SELECT study.reference_idx AS referenceIdx,
               study.user_idx AS userIdx,
               name,
               title,
               isPrivate,
               study.content,
               category,
               file_attachments,
               likes_count AS likesCount,
               report_count AS reportCount,
               comments_count AS commentsCount,
               views_count AS viewsCount,
               DATE_FORMAT(study.created_at, '%Y-%m-%d %H:%i') AS createdAt,
               study.updated_at AS updatedAt,
               IFNULL(lr.reference_idx, 0) AS isLike,
               COUNT(*) OVER () AS TOTALCOUNT
        FROM StudyReferences study
                 LEFT JOIN Users user ON user.user_idx = study.user_idx
                 LEFT JOIN LikeReferences lr ON study.reference_idx = lr.reference_idx AND lr.user_idx = #{userIdx}
        WHERE study.reference_idx = #{referenceIdx}
    </select>

    <select id="getCommentsByReferenceIdx" resultType="bit.naver.entity.CommentsEntity">
        SELECT comment.comment_idx AS commentIdx,
               comment.user_idx AS userIdx,
               comment.reference_idx AS referenceIdx,
               comment.content AS content,
               DATE_FORMAT(comment.created_at, '%Y-%m-%d %H:%i') AS createdAt,
               name,
               COUNT(*) OVER () AS TOTALCOUNT
        FROM Comments comment
                 LEFT JOIN Users user ON user.user_idx = comment.user_idx
        WHERE comment.reference_idx = #{referenceIdx}
        ORDER BY comment.created_at DESC
    </select>

    <delete id="deleteComment">
        DELETE FROM Comments
        WHERE comment_idx = #{commentIdx}
    </delete>

    <insert id="insertComment">
        INSERT INTO Comments (user_idx, reference_idx, content, created_at)
        VALUES (#{userIdx}, #{referenceIdx}, #{content}, now())
    </insert>

    <update id="updateViewsCount">
        UPDATE StudyReferences
        SET views_count = views_count + 1
        WHERE reference_idx = #{referenceIdx}
    </update>

    <insert id="insertLike">
        INSERT INTO LikeReferences (user_idx, reference_idx, created_at)
        VALUES (#{userIdx}, #{referenceIdx}, now())
    </insert>

    <update id="plusLike">
        UPDATE StudyReferences
        SET likes_count = likes_count + 1
        WHERE reference_idx = #{referenceIdx}
    </update>

    <delete id="deleteLike">
        DELETE FROM LikeReferences
        WHERE reference_idx = #{referenceIdx}
          AND user_idx = #{userIdx}
    </delete>

    <update id="minusLike">
        UPDATE StudyReferences
        SET likes_count = likes_count - 1
        WHERE reference_idx = #{referenceIdx}
    </update>

    <insert id="updateReport">
        UPDATE StudyReferences
        SET report_count = report_count + 1
        WHERE reference_idx = #{referenceIdx}
    </insert>

    <insert id="writePost" keyColumn="reference_idx" keyProperty="referenceIdx" useGeneratedKeys="true">
        INSERT INTO StudyReferences (user_idx, title, isPrivate, content, created_at, updated_at)
        VALUES (#{userIdx}, #{title}, #{isPrivate}, #{content}, now(), now())
    </insert>

    <delete id="deleteLikeRef">
        DELETE FROM LikeReferences
        WHERE reference_idx = #{referenceIdx}
    </delete>

    <delete id="deleteCommentRef">
        DELETE FROM Comments
        WHERE reference_idx = #{referenceIdx}
    </delete>

    <delete id="deletePost">
        DELETE FROM StudyReferences
        WHERE reference_idx = #{referenceIdx}
    </delete>

    <update id="updatePost">
        UPDATE StudyReferences
        SET title = #{title}, content = #{content}, isPrivate = #{isPrivate}
        WHERE reference_idx = #{referenceIdx}
    </update>
</mapper>
